#!/bin/bash
set -e

function prerequisites {
  #Prerequisites function
  echo -e
  echo -e "${GREEN}Updating system & installing some dependencies...${NC}"
  echo -e
  DISTRO=$(cat /etc/*-release | grep -w "ID")
  
  if [[ $DISTRO == *"ubuntu"* ]] || [[ $DISTRO == *"debian"* ]]; then
                                      sudo apt -qq update  && sudo apt -y upgrade 
                                      sudo apt install build-essential -y && sudo apt -qq -y install git rsync curl zip unzip jq gcc wget
                                      echo "export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin" >> ~/.profile
                                      echo "export GOPATH=$HOME/go" >> ~/.profile
                                  else 
                                    echo "Unsupported DISTRO..."
                                    exit

   fi
  
  # Create nodes & utils home
  if ! [ -d "$CUSTOM_HOME/elrond-nodes" ]; then mkdir -p $CUSTOM_HOME/elrond-nodes; fi
  if ! [ -d "$CUSTOM_HOME/elrond-utils" ]; then mkdir -p $CUSTOM_HOME/elrond-utils; fi
  
  #Limit journalctl size
  echo -e
  echo -e "${GREEN}Limiting journalctl node units logs size...${NC}"
  echo -e
  echo 'SystemMaxUse=900M' | sudo tee -a /etc/systemd/journald.conf && echo 'SystemMaxFileSize=100M' | sudo tee -a /etc/systemd/journald.conf
  sudo systemctl restart systemd-journald
  
  echo -e "${GREEN}Task completed.${NC}"
  echo -e
}

function paths {
  # Export environment variables
  export GOPATH=$HOME/go
  export PATH=$GOPATH/bin:$PATH
  export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
}

function deploy_to_host {
  #Push scripts to remote hosts  
  for HOST in $(cat config/target_ips) 
    do
      echo -e
      echo -e "${GREEN}Uploading scripts to host ${CYAN}$HOST${GREEN}...${NC}"
      echo -e
      rsync -avzhe "ssh -o StrictHostKeyChecking=no -p $SSHPORT -i $PEM" --exclude '.git' $SCRIPTS_LOCATION $CUSTOM_USER@$HOST:
    done
}


function go_lang {
 #Check if go is installed & install latest version

 if ! [ -x "$(command -v go)" ];

     then
       #Get the latest version of GO for amd64 & installing it
       echo -e
       echo -e "${RED}GO is not installed on your system${NC}"  
       GO_LATEST=$(curl -sS https://golang.org/VERSION?m=text)
       echo -e
       echo -e "${GREEN}The latest version Go is:${CYAN}$GO_LATEST${NC}"
       echo -e "${GREEN}Installing it now...${NC}"
       echo -e
       wget https://dl.google.com/go/$GO_LATEST.linux-amd64.tar.gz
       sudo tar -C /usr/local -xzf $GO_LATEST.linux-amd64.tar.gz
       rm $GO_LATEST.linux-amd64.tar.gz
       
     else
       VER=$(go version)
       echo -e
       echo -e "${GREEN}GO is already installed: ${CYAN}$VER${NC}${GREEN}...skipping install${NC}"
       echo -e
   fi

}

function replicant {
  #Copy the scripts to the predefined $CUSTOM_HOME folder (so as not to break autoupdate)
  rsync --exclude '.git' -a "$(pwd -P)" $CUSTOM_HOME
}

function git_clone {
  #Clone the elrong-go & elrong-config repos
  curl --silent "https://api.github.com/repos/ElrondNetwork/elrond-go/releases/latest" > $HOME/api_check_tmp
  
  if grep -Fxq "API rate limit exceeded" $HOME/api_check_tmp
                          then
                            echo -e
                            echo -e "${RED}Github API rate limit exceeded for your IP...${NC}"
                            echo -e 
                            exit
                          fi            
  rm $HOME/api_check_tmp
                    
  echo -e
  echo -e "${GREEN}Cloning into ${CYAN}elrond-go${GREEN} with tag ${CYAN}$BINARYVER${GREEN}...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork && git clone https://github.com/ElrondNetwork/elrond-go 1> /dev/null 2>&1 && cd elrond-go && git checkout --force $BINARYVER 1> /dev/null 2>&1
  echo -e "${GREEN}Cloning into ${CYAN}elrond-config${GREEN} with tag ${CYAN}$CONFIGVER${GREEN}...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork && git clone https://github.com/ElrondNetwork/elrond-config 1> /dev/null 2>&1 && cd elrond-config && git checkout --force $CONFIGVER 1> /dev/null 2>&1
  echo -e "${GREEN}Done ! Moving to next step...${NC}"
  echo -e

}


function systemd {
#Add systemd node service & syslogd logging

  echo -e
  echo -e "${GREEN}Installing systemd unit for node-$INDEX...${NC}"
  echo -e

  OFFSET=8080
  APIPORT=$(( $OFFSET + $INDEX ))

  #Create the service file for our node
  echo "[Unit]
  Description=Elrond Node-$INDEX
  After=network-online.target
  
  [Service]
  User=$CUSTOM_USER
  WorkingDirectory=$WORKDIR
  ExecStart=$WORKDIR/node -use-log-view -rest-api-interface localhost:$APIPORT
  StandardOutput=journal
  StandardError=journal
  Restart=always
  RestartSec=3
  LimitNOFILE=4096
  
  [Install]
  WantedBy=multi-user.target" > elrond-node-$INDEX.service
  
  #Move files to appropriate locations
  sudo mv elrond-node-$INDEX.service /etc/systemd/system/
  sudo systemctl enable elrond-node-$INDEX.service
  
}

function build_node {
  #Build the node from latest tag
  echo -e
  echo -e "${GREEN}Building your node from tag ${CYAN}$BINARYVER${GREEN}...${NC}"
  echo -e
  #Building the node from the elrond-go repo
  echo -e "${GREEN}Downloading go modules...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go && GO111MODULE=on go mod vendor 1> /dev/null 2>&1
  
  echo -e "${GREEN}Compiling binary...${NC}"
  echo -e
  cd cmd/node && go build -i -v -ldflags="-X main.appVersion=$(git describe --tags --long --dirty)" 1> /dev/null 2>&1
  
  echo -e "${GREEN}Compiling the termui binary & copying to your elrond-utils remote folder...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/termui && go build 1> /dev/null 2>&1
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/termui/termui $CUSTOM_HOME/elrond-utils/
  
  echo -e "${GREEN}Compiling the logviewer binary & copying to your remote home path...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/logviewer && go build 1> /dev/null 2>&1
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/logviewer/logviewer $CUSTOM_HOME/elrond-utils/
  
  echo -e "${GREEN}Copying libwasmer to your LIB folder...${NC}"
  echo -e
  sudo cp $GOPATH/pkg/mod/github.com/\!elrond\!network/go-ext-wasm@v0.1.0/wasmer/libwasmer_runtime_c_api.so /lib/
}

function install {
  #Copy configs to /opt/node
  echo -e
  echo -e "${GREEN}Copying binary & configs for ${CYAN}node-$INDEX${GREEN} to ${CYAN}$WORKDIR${GREEN}...${NC}"
  echo -e
  
  mkdir -p $WORKDIR/config
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/node/node $WORKDIR
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-config/* $WORKDIR/config
   
}

function autoupdate {
  #Add the auto-updater.sh script to the user's crontab
  crontab -l 2>/dev/null | { cat; echo "*/10 * * * * /bin/bash -c $CUSTOM_HOME/elrond-go-scripts-v2/auto-updater.sh"; } | crontab -
}


function node_name {
  echo -e
  echo -e "${GREEN}Time to choose a node name...${NC}"
  echo -e
  read -p "Choose a custom name (default elrond-validator-$INDEX): " NODE_NAME
  if [ "$NODE_NAME" = "" ]
  then
      NODE_NAME="elrond-validator-$INDEX"
  fi
  
  sed -i "s/NodeDisplayName = \"\"/NodeDisplayName = \"${NODE_NAME//\//\\/}\"/" $WORKDIR/config/prefs.toml
}

function cleanup {
  #Cleanup Logs, Stats & DB
  echo -e
  echo -e "${RED}Erasing previous node data (db,logs,stats)...${NC}"
  echo -e
  
  sudo rm -rf $UPDATEWORKDIR/logs
  sudo rm -rf $UPDATEWORKDIR/stats
  sudo rm -rf $UPDATEWORKDIR/db
}

function update {
  echo -e
  echo -e "${GREEN}Updating node-$UPDATEINDEX binary & configs...${NC}"
  echo -e
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/node/node $UPDATEWORKDIR
  cp $GOPATH/src/github.com/ElrondNetwork/elrond-config/* $UPDATEWORKDIR/config 

}

function build_keygen {
  
  echo -e
  echo -e "${GREEN}Building key generator...${NC}"
  echo -e
  cd $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/keygenerator && go build
  
}

function keys {
  #Check for keys or build Key Generator and create unique node keys
  if [[ -f $NODE_KEYS_LOCATION/node-$INDEX.zip ]]; then
                       echo -e
                       echo -e "${GREEN}Found PEMs on host for node-$INDEX. Copying them to node-$INDEX config folder...${NC}"
                       echo -e 
                       unzip -j $NODE_KEYS_LOCATION/node-$INDEX.zip -d $WORKDIR/config/
               else
                 echo -e
                 echo -e "${GREEN}No PEMs present. Generating private node keys (node will be an observer)...${NC}"
                 echo -e
                 cd $GOPATH/src/github.com/ElrondNetwork/elrond-go/cmd/keygenerator && ./keygenerator
                 mv *.pem $WORKDIR/config 
    fi

}

sudofix="/etc/sudoers.d/elrond_systemd"
function install_sudofix {
        if [[ "$CUSTOM_USER" != "root" ]]; then
                echo -e "\n${GREEN}Creating passwordless systemd start+stop sudo for node $INDEX${NC}"
                echo "$CUSTOM_USER ALL=NOPASSWD: /bin/systemctl stop elrond-node-$INDEX.service" | sudo tee -a $sudofix
                echo "$CUSTOM_USER ALL=NOPASSWD: /bin/systemctl start elrond-node-$INDEX.service" | sudo tee -a $sudofix
        fi

}
